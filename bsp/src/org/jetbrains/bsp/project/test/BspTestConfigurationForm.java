package org.jetbrains.bsp.project.test;

import com.intellij.openapi.project.Project;
import com.intellij.ui.CollectionListModel;
import com.intellij.ui.DocumentAdapter;
import com.intellij.ui.components.JBList;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.bsp.data.BspMetadata;
import org.jetbrains.plugins.scala.util.JListCompatibility;
import org.jetbrains.plugins.scala.util.JListCompatibility.CollectionListModelWrapper;
import scala.collection.JavaConverters;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.util.Collections;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Collectors;

public class BspTestConfigurationForm {
	final Project project;
	JPanel mainPanel;
	JComboBox testModeCombobox;

	JPanel testClassFormWrapper;
	JTextField testClassNameRegex;
	JBList matchedClassesList;
	CollectionListModelWrapper matchedClassesModel = new CollectionListModelWrapper(new CollectionListModel<String>(Collections.emptyList()));

	@SuppressWarnings("unchecked")
	public BspTestConfigurationForm(Project project) {
		this.project = project;
		$$$setupUI$$$();
		{ // init combo box
			for (TestMode sm : TestMode.values())
				testModeCombobox.addItem(sm);
			testModeCombobox.addItemListener(e -> {
				if (e.getStateChange() == ItemEvent.SELECTED)
					onSelectModeChanged((TestMode) e.getItem());
			});
		}
		{ // init matched classes list
			JListCompatibility.setModel(matchedClassesList, matchedClassesModel.getModelRaw());
			updateMatchedClassesList(Collections.emptyList());
			testClassNameRegex.getDocument().addDocumentListener(new DocumentAdapter() {
				@Override
				protected void textChanged(@NotNull DocumentEvent e) {
					onClassNameRegexChanged();
				}
			});
		}
	}

	private void onClassNameRegexChanged() {
		try {
			Pattern pat = Pattern.compile(testClassNameRegex.getText());
			List<String> matched = JavaConverters.seqAsJavaList(BspMetadata.findScalaTestClasses(project))
				.stream()
				.map(t -> t._2)
				.filter(s -> pat.matcher(s).matches())
				.collect(Collectors.toList());
			updateMatchedClassesList(matched);
		} catch (PatternSyntaxException e) {
			matchedClassesModel.getModel().removeAll();
			matchedClassesList.setEmptyText("Invalid regex");
		}
	}

	private void onSelectModeChanged(TestMode current) {
		switch (current) {
			case ALL_IN_PROJECT:
				testClassFormWrapper.setVisible(false);
				break;
			case CLASS:
				testClassFormWrapper.setVisible(true);
				break;
		}
	}

	public void apply(BspTestRunConfiguration conf) {
		testModeCombobox.setSelectedItem(conf.getTestMode());
		onSelectModeChanged(conf.getTestMode());
		testClassNameRegex.setText(conf.getTestClassesRegex());
	}

	private void updateMatchedClassesList(List<String> matchedClasses) {
		if (matchedClasses.isEmpty())
			matchedClassesList.setEmptyText("No matched test classes");
		matchedClassesModel.getModel().replaceAll(matchedClasses);
	}


	enum TestMode {
		ALL_IN_PROJECT("All in project"),
		CLASS("Scala class");

		String displayText;

		TestMode(String n) {
			this.displayText = n;
		}

		@Override
		public String toString() {
			return displayText;
		}
	}

	public TestMode getTestMode() {
		return (TestMode) testModeCombobox.getSelectedItem();
	}

	public String getTestClassNameRegex() {
		return testClassNameRegex.getText();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
		final Spacer spacer1 = new Spacer();
		mainPanel.add(spacer1, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		final JLabel label1 = new JLabel();
		label1.setText("Test kind:");
		mainPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		testModeCombobox = new JComboBox();
		mainPanel.add(testModeCombobox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
		testClassFormWrapper = new JPanel();
		testClassFormWrapper.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
		mainPanel.add(testClassFormWrapper, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		final JLabel label2 = new JLabel();
		label2.setText("Test classes regex:");
		testClassFormWrapper.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		testClassNameRegex = new JTextField();
		testClassFormWrapper.add(testClassNameRegex, new GridConstraints(0, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		final JLabel label3 = new JLabel();
		label3.setText("Matched classes:");
		testClassFormWrapper.add(label3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final JBScrollPane jBScrollPane1 = new JBScrollPane();
		testClassFormWrapper.add(jBScrollPane1, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		matchedClassesList = new JBList();
		matchedClassesList.setAutoscrolls(false);
		jBScrollPane1.setViewportView(matchedClassesList);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}


}
